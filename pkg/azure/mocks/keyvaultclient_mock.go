// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	jwk "github.com/lestrrat-go/jwx/jwk"
	mock "github.com/stretchr/testify/mock"

	rsa "crypto/rsa"

	x509 "crypto/x509"
)

// KeyVaultClient is an autogenerated mock type for the KeyVaultClient type
type KeyVaultClient struct {
	mock.Mock
}

type KeyVaultClient_Expecter struct {
	mock *mock.Mock
}

func (_m *KeyVaultClient) EXPECT() *KeyVaultClient_Expecter {
	return &KeyVaultClient_Expecter{mock: &_m.Mock}
}

// GetCertificate provides a mock function with given fields: ctx, certificateName, version
func (_m *KeyVaultClient) GetCertificate(ctx context.Context, certificateName string, version string) (*x509.Certificate, error) {
	ret := _m.Called(ctx, certificateName, version)

	var r0 *x509.Certificate
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *x509.Certificate); ok {
		r0 = rf(ctx, certificateName, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*x509.Certificate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, certificateName, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeyVaultClient_GetCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCertificate'
type KeyVaultClient_GetCertificate_Call struct {
	*mock.Call
}

// GetCertificate is a helper method to define mock.On call
//  - ctx context.Context
//  - certificateName string
//  - version string
func (_e *KeyVaultClient_Expecter) GetCertificate(ctx interface{}, certificateName interface{}, version interface{}) *KeyVaultClient_GetCertificate_Call {
	return &KeyVaultClient_GetCertificate_Call{Call: _e.mock.On("GetCertificate", ctx, certificateName, version)}
}

func (_c *KeyVaultClient_GetCertificate_Call) Run(run func(ctx context.Context, certificateName string, version string)) *KeyVaultClient_GetCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *KeyVaultClient_GetCertificate_Call) Return(_a0 *x509.Certificate, _a1 error) *KeyVaultClient_GetCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetKey provides a mock function with given fields: ctx, keyName, version
func (_m *KeyVaultClient) GetKey(ctx context.Context, keyName string, version string) (jwk.Key, error) {
	ret := _m.Called(ctx, keyName, version)

	var r0 jwk.Key
	if rf, ok := ret.Get(0).(func(context.Context, string, string) jwk.Key); ok {
		r0 = rf(ctx, keyName, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jwk.Key)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, keyName, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeyVaultClient_GetKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKey'
type KeyVaultClient_GetKey_Call struct {
	*mock.Call
}

// GetKey is a helper method to define mock.On call
//  - ctx context.Context
//  - keyName string
//  - version string
func (_e *KeyVaultClient_Expecter) GetKey(ctx interface{}, keyName interface{}, version interface{}) *KeyVaultClient_GetKey_Call {
	return &KeyVaultClient_GetKey_Call{Call: _e.mock.On("GetKey", ctx, keyName, version)}
}

func (_c *KeyVaultClient_GetKey_Call) Run(run func(ctx context.Context, keyName string, version string)) *KeyVaultClient_GetKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *KeyVaultClient_GetKey_Call) Return(_a0 jwk.Key, _a1 error) *KeyVaultClient_GetKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetSecret provides a mock function with given fields: ctx, secretName, version
func (_m *KeyVaultClient) GetSecret(ctx context.Context, secretName string, version string) (*string, error) {
	ret := _m.Called(ctx, secretName, version)

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *string); ok {
		r0 = rf(ctx, secretName, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, secretName, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeyVaultClient_GetSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecret'
type KeyVaultClient_GetSecret_Call struct {
	*mock.Call
}

// GetSecret is a helper method to define mock.On call
//  - ctx context.Context
//  - secretName string
//  - version string
func (_e *KeyVaultClient_Expecter) GetSecret(ctx interface{}, secretName interface{}, version interface{}) *KeyVaultClient_GetSecret_Call {
	return &KeyVaultClient_GetSecret_Call{Call: _e.mock.On("GetSecret", ctx, secretName, version)}
}

func (_c *KeyVaultClient_GetSecret_Call) Run(run func(ctx context.Context, secretName string, version string)) *KeyVaultClient_GetSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *KeyVaultClient_GetSecret_Call) Return(_a0 *string, _a1 error) *KeyVaultClient_GetSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ImportCertificate provides a mock function with given fields: ctx, certificateName, certificate, key
func (_m *KeyVaultClient) ImportCertificate(ctx context.Context, certificateName string, certificate *x509.Certificate, key *rsa.PrivateKey) error {
	ret := _m.Called(ctx, certificateName, certificate, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *x509.Certificate, *rsa.PrivateKey) error); ok {
		r0 = rf(ctx, certificateName, certificate, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KeyVaultClient_ImportCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImportCertificate'
type KeyVaultClient_ImportCertificate_Call struct {
	*mock.Call
}

// ImportCertificate is a helper method to define mock.On call
//  - ctx context.Context
//  - certificateName string
//  - certificate *x509.Certificate
//  - key *rsa.PrivateKey
func (_e *KeyVaultClient_Expecter) ImportCertificate(ctx interface{}, certificateName interface{}, certificate interface{}, key interface{}) *KeyVaultClient_ImportCertificate_Call {
	return &KeyVaultClient_ImportCertificate_Call{Call: _e.mock.On("ImportCertificate", ctx, certificateName, certificate, key)}
}

func (_c *KeyVaultClient_ImportCertificate_Call) Run(run func(ctx context.Context, certificateName string, certificate *x509.Certificate, key *rsa.PrivateKey)) *KeyVaultClient_ImportCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*x509.Certificate), args[3].(*rsa.PrivateKey))
	})
	return _c
}

func (_c *KeyVaultClient_ImportCertificate_Call) Return(_a0 error) *KeyVaultClient_ImportCertificate_Call {
	_c.Call.Return(_a0)
	return _c
}

// ImportKey provides a mock function with given fields: ctx, keyName, key
func (_m *KeyVaultClient) ImportKey(ctx context.Context, keyName string, key jwk.Key) error {
	ret := _m.Called(ctx, keyName, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, jwk.Key) error); ok {
		r0 = rf(ctx, keyName, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KeyVaultClient_ImportKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImportKey'
type KeyVaultClient_ImportKey_Call struct {
	*mock.Call
}

// ImportKey is a helper method to define mock.On call
//  - ctx context.Context
//  - keyName string
//  - key jwk.Key
func (_e *KeyVaultClient_Expecter) ImportKey(ctx interface{}, keyName interface{}, key interface{}) *KeyVaultClient_ImportKey_Call {
	return &KeyVaultClient_ImportKey_Call{Call: _e.mock.On("ImportKey", ctx, keyName, key)}
}

func (_c *KeyVaultClient_ImportKey_Call) Run(run func(ctx context.Context, keyName string, key jwk.Key)) *KeyVaultClient_ImportKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(jwk.Key))
	})
	return _c
}

func (_c *KeyVaultClient_ImportKey_Call) Return(_a0 error) *KeyVaultClient_ImportKey_Call {
	_c.Call.Return(_a0)
	return _c
}

// SetSecret provides a mock function with given fields: ctx, secretName, value
func (_m *KeyVaultClient) SetSecret(ctx context.Context, secretName string, value string) error {
	ret := _m.Called(ctx, secretName, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, secretName, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KeyVaultClient_SetSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSecret'
type KeyVaultClient_SetSecret_Call struct {
	*mock.Call
}

// SetSecret is a helper method to define mock.On call
//  - ctx context.Context
//  - secretName string
//  - value string
func (_e *KeyVaultClient_Expecter) SetSecret(ctx interface{}, secretName interface{}, value interface{}) *KeyVaultClient_SetSecret_Call {
	return &KeyVaultClient_SetSecret_Call{Call: _e.mock.On("SetSecret", ctx, secretName, value)}
}

func (_c *KeyVaultClient_SetSecret_Call) Run(run func(ctx context.Context, secretName string, value string)) *KeyVaultClient_SetSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *KeyVaultClient_SetSecret_Call) Return(_a0 error) *KeyVaultClient_SetSecret_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewKeyVaultClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewKeyVaultClient creates a new instance of KeyVaultClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKeyVaultClient(t mockConstructorTestingTNewKeyVaultClient) *KeyVaultClient {
	mock := &KeyVaultClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
