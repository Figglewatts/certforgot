// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// BlobClient is an autogenerated mock type for the BlobClient type
type BlobClient struct {
	mock.Mock
}

type BlobClient_Expecter struct {
	mock *mock.Mock
}

func (_m *BlobClient) EXPECT() *BlobClient_Expecter {
	return &BlobClient_Expecter{mock: &_m.Mock}
}

// Download provides a mock function with given fields: ctx
func (_m *BlobClient) Download(ctx context.Context) ([]byte, error) {
	ret := _m.Called(ctx)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context) []byte); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlobClient_Download_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Download'
type BlobClient_Download_Call struct {
	*mock.Call
}

// Download is a helper method to define mock.On call
//  - ctx context.Context
func (_e *BlobClient_Expecter) Download(ctx interface{}) *BlobClient_Download_Call {
	return &BlobClient_Download_Call{Call: _e.mock.On("Download", ctx)}
}

func (_c *BlobClient_Download_Call) Run(run func(ctx context.Context)) *BlobClient_Download_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *BlobClient_Download_Call) Return(_a0 []byte, _a1 error) *BlobClient_Download_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Exists provides a mock function with given fields: ctx
func (_m *BlobClient) Exists(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlobClient_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type BlobClient_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//  - ctx context.Context
func (_e *BlobClient_Expecter) Exists(ctx interface{}) *BlobClient_Exists_Call {
	return &BlobClient_Exists_Call{Call: _e.mock.On("Exists", ctx)}
}

func (_c *BlobClient_Exists_Call) Run(run func(ctx context.Context)) *BlobClient_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *BlobClient_Exists_Call) Return(_a0 bool, _a1 error) *BlobClient_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Upload provides a mock function with given fields: ctx, buffer
func (_m *BlobClient) Upload(ctx context.Context, buffer []byte) error {
	ret := _m.Called(ctx, buffer)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) error); ok {
		r0 = rf(ctx, buffer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BlobClient_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type BlobClient_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//  - ctx context.Context
//  - buffer []byte
func (_e *BlobClient_Expecter) Upload(ctx interface{}, buffer interface{}) *BlobClient_Upload_Call {
	return &BlobClient_Upload_Call{Call: _e.mock.On("Upload", ctx, buffer)}
}

func (_c *BlobClient_Upload_Call) Run(run func(ctx context.Context, buffer []byte)) *BlobClient_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte))
	})
	return _c
}

func (_c *BlobClient_Upload_Call) Return(_a0 error) *BlobClient_Upload_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewBlobClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewBlobClient creates a new instance of BlobClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBlobClient(t mockConstructorTestingTNewBlobClient) *BlobClient {
	mock := &BlobClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
